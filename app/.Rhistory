swirl()
library(swirl)
swirl()
dir.create("testdir")
info()
setwd("testdir")
files.create("mytest.R")
file.create("mytest.R")
list.files(.)
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
?file.path
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
ls()
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
?setwd
getwd()
setwd(old.dir)
library("swirl")
swirl()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
ls()
?file.path
file.path("mytest3.R")
?file.path
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
:
?:
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, lenght=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
library("swirl")
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- (num_vect < 1)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Pierre-Louis")
my_name <- c(my_char, "Pierre-Louis")
my_name
paste(my_name)
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
swirl()
install.packages("swirl")
library(swirl)
library("swirl")
swirl::install_course("R Programming")
swirl()
num_vec <- c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Pierre-Louis")
my_name <- c(my_char, "Pierre-Louis")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " "
)
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is_na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c()
c(3, 5, 7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)
]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
name(vect)
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matric()
?matrix()
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5, byrow = FALSE, dimnames = NULL)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
exit()
install.packages("swirl")
library(swirl)
swirl()
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
runApp("App-1")
runApp("App-1")
runApp("App-1", display.mode = "showcase")
hist(x, breaks = bins, col = "#75AADB", border = "orange",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
runApp('C:/Windows/System32/App-1')
runApp('C:/Windows/System32/App-1')
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
runApp('C:/Windows/System32/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/App-1')
runApp('~/ING5 Data Analytics in R/census-app')
runApp('~/ING5 Data Analytics in R/census-app')
runApp('~/ING5 Data Analytics in R/census-app')
runApp('~/ING5 Data Analytics in R/census-app')
runApp('~/ING5 Data Analytics in R/census-app')
runApp('~/ING5 Data Analytics in R/census-app')
install.packages("rmarkdown")
install.packages("rmarkdown")
shiny::runApp('C:/Users/pierr/Desktop/Airbnb-Data-Analysis/app')
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/pierr/Desktop/Airbnb-Data-Analysis/app')
